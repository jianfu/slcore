#! @BASH@
# Run script for MT binaries.
PS4='+ r-mt-sim($$): '
if test -n "${TRACE:-}"; then set -x; fi
set -eu
basename=${0##*/}
program=${1:?}
datafile=${2:?}
fdatafile=${3:?}
shift
shift
shift

slc_datadir=${SLC_DATADIR:-@slc_datadir@}
DEBUGGER=${DEBUGGER:-gdb --args}
SIMARGS=${SIMARGS:-}
mgsim=(${MGSIM_@ARCH@:-@MGSIM_ARCH@})
thevar=MGSIM_@ARCH@
nm=(${NM_MT@ARCH@_OVERRIDE:-@NM_ARCH@})
python=${PYTHON:-@python@}
simargs_base=()

##
## Selection of the number of cores
##

if test -n "${SLR_RECURSIVE:-}"; then
  SIMPROFILE=arggen
  export MGSYS_QUIET=1
  simargs_base+=(-q)
  unset SLR_NCORES SIMARGS
fi

found=
pf="$HOME/.mt-profiles/$SIMPROFILE"
if test -r "$pf"; then
    found=$pf
else
    saveIFS=$IFS
    IFS=:
    for d in $slc_datadir; do
        pf="$d/mt-profiles/$SIMPROFILE"
        if test -r "$pf"; then
            found="$pf"
            break
        fi
    done
    IFS=$saveIFS
fi
if test -z "$found"; then
   echo "$basename: profile '$SIMPROFILE' not found." >&2
   exit 1
else
    . "$found"
    if test -n "${VERBOSE:-}"; then
        echo "$basename: using profile: $pf" >&2
        echo "$basename: profile description: ${DESCRIPTION:-(no description)}" >&2
        simargs_base+=(-d)
    fi
fi

##
## Selection of the memory system
##

if ! test -x "${mgsim[0]}"; then
    echo "$basename: ${mgsim[0]} not found or not executable." >&2
    exit 127
else
    bn=${mgsim[0]}
    bn=${bn##*/}
    d=$(dirname "${mgsim[0]}")
    d=$(cd "$d" && pwd -P)
    mgsim[0]=$d/$bn
fi

##
## Selection of debugging 
##

do_debug=
if test -n "${DEBUG:-}"; then
    simargs_base+=(-i)
    do_debug=$DEBUGGER
    if ! test -x "${mgsim[0]}.dbg"; then
	echo "$basename: warning: ${mgsim[0]}.dbg not found, using ${mgsim[0]} instead." >&2
    else
	mgsim[0]=${mgsim[0]}.dbg
    fi
fi

##
## Selection of graphical output
##

if test -n "${SIMGFX:-}"; then
    if ! test -x "${mgsim[0]}.gfx"; then
	echo "$basename: warning: ${mgsim[0]}.gfx not found, disabling graphical output." >&2
    else    
	mgsim[0]=${mgsim[0]}.gfx
	if test -n "${gfx_scale:-}"; then
	    simargs_base+=(-o SDLHorizScale=${gfx_scale%,*} -o SDLVertScale=${gfx_scale#*,})
	fi
	if test -n "${gfx_refresh:-}"; then
	    simargs_base+=(-o SDLRefreshDelay=$gfx_refresh)
	fi
    fi
fi

b=${program##*/}
d=$(dirname "$program")
if test -z "${SLR_RDIR:-}"; then d=$(cd "$d" && pwd -P); fi

envfile=${SLR_RDIR:-${TMPDIR:-/tmp}}/$b.$$.envdata
if test -n "${VERBOSE:-}"; then echo "$basename: dumping environment to: $envfile" >&2; fi
$python -c "import os, sys; sys.stdout.write('\0'.join(('%s=%s' % x for x in os.environ.items()))+'\0'*8)" >"$envfile"

if test -z "${SLR_RECURSIVE:-}"; then
    symfile=${SLR_RDIR:-${TMPDIR:-/tmp}}/$b.$$.syms
    if test -n "${VERBOSE:-}"; then echo "$basename: dumping symbols to: $symfile" >&2; fi
    if test "x${nm[0]}" != xno; then
        "${nm[@]}" -P "$program" >"$symfile"
    else
        touch "$symfile"
    fi
    simargs_base+=(-s "$symfile")
fi

runner_cmdline=("${mgsim[@]}" \
    ${simargs_base+"${simargs_base[@]}"} ${SIMARGS:-} \
    -t -L7 "$datafile" -L6 "$fdatafile" -L5 "$envfile" -o 'rom_boot:ROMFileName='"$d/$b")

first=${runner_cmdline[0]}
unset runner_cmdline[0]
if test -n "${SLR_RDIR:-}"; then
  cat >"$SLR_RDIR"/run.sh <<EOF
#! /bin/bash
d=\$(dirname "\$0")
cd "\$d"
$thevar=\${$thevar:-$first}
EOF
  set | grep '^runner_cmdline=' >>"$SLR_RDIR"/run.sh
  echo "exec ${RUNNER_PREFIX:-} $do_debug \"\$$thevar\" \"\${runner_cmdline[@]}\" \"\$@\" -- $d/$b ${1:+$*}" >>"$SLR_RDIR"/run.sh
  chmod +x run.sh
fi

if test -n "${VERBOSE:-}"; then
    echo "$basename: cwd=$PWD" >&2
    echo "$basename: running: ${RUNNER_PREFIX:-} $do_debug $first ${runner_cmdline[*]} -- $d/$b ${1:+$*}" >&2
fi  
exec ${RUNNER_PREFIX:-} $do_debug "$first" "${runner_cmdline[@]}" -- "$d/$b" ${1+"$@"}
